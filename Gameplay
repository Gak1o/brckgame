import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.Timer;

import javax.swing.JPanel;

public class Gameplay extends JPanel implements KeyListener,ActionListener{
	
	private boolean play = false;
	private int score = 0;
	
	private int totalBrick = 21;
	private Timer timer;
	private int delay =8;
	
	private int playerx = 310;
	
	private int ballposx =120;
	private int ballposy =350;
	private int ballxdl = -1;
	private int ballydl = -2;
	
	private MapGenerator map;
	
	
	public Gameplay() {
		map = new MapGenerator(3,7);
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(false);
		timer =new Timer(delay,this);
		timer.start();
		
	}
	
	
	public void paint(Graphics g) {
		//background
		g.setColor(Color.black);
		g.fillRect(1,1, 692,592);
		
		//drawing map
		map.draw((Graphics2D)g);
		
		//borders
		g.setColor(Color.yellow);
		g.fillRect(0,0,3,592);
		g.fillRect(0,0,692,3);
		g.fillRect(691,0,3,592);
		
		//SCORE
		g.setColor(Color.white);
		g.setFont(new Font("serif",Font.BOLD,25));
		g.drawString(""+score,590,30);
		
		//paddle
		g.setColor(Color.white);
		g.fillRect(playerx, 550, 100, 8);
		
		//ball
		g.setColor(Color.orange);
		g.fillOval(ballposx,ballposy, 20,20);
		
		if(totalBrick <= 0) {
			
			play = false;
			ballxdl = 0;
			ballydl = 0;
			g.setColor(Color.green);
			g.setFont(new Font("serif",Font.BOLD,30));
			g.drawString("YOU WON,SCORES:",260,300);
			
			
			g.setFont(new Font("serif",Font.BOLD,20));
			g.drawString("Press enter to Restart",230,350);
			
			
		}
		
		if(ballposy > 570) {
			play = false;
			ballxdl = 0;
			ballydl = 0;
			g.setColor(Color.red);
			g.setFont(new Font("serif",Font.BOLD,30));
			g.drawString("GAME OVER,SCORES:",190,300);
			
			
			g.setFont(new Font("serif",Font.BOLD,20));
			g.drawString("Press enter to Restart",230,350);
			
			
		}
		
		
		g.dispose();
		
		
	}
	
	
	
	
	@Override
	public void actionPerformed(ActionEvent e) {
		timer.start();
		
		if(play) {
			
			
			if(new Rectangle(ballposx,ballposy,20,20).intersects(new Rectangle(playerx,550,100,8))) {
				ballydl = -ballydl;
			}
			
			A: for(int i=0;i<map.map.length;i++) {
				for(int j=0;j<map.map[0].length;j++) {
					if(map.map[i][j] > 0) {
						int brickx =j*map.brickwidth +80;
						int bricky =i*map.brickheight +50;
						int brickwidth = map.brickwidth;
						int brickheight = map.brickheight;
						
						
						Rectangle rect = new Rectangle(brickx,bricky,brickwidth,brickheight);
						Rectangle ballRect = new Rectangle(ballposx,ballposy,20,20);
						Rectangle brickRect = rect;
						
						if(ballRect.intersects(brickRect)) {
							map.setBrickValue(0, i, j);
							totalBrick--;
							score +=5;
							
							
						if(ballposx + 19 <=brickRect.x || ballposx + 1 >= brickRect.x + brickRect.width ) {
							ballxdl = -ballxdl;
						}
						else {
							ballydl = -ballydl;
						}
						break A;
						}
					}
					
				}
			}
			
			
			
			ballposx += ballxdl;
			ballposy += ballydl;
			if(ballposx < 0) {
				ballxdl = -ballxdl;
			}
			if(ballposy < 0) {
				ballydl = -ballydl;
			}
				
				if(ballposx > 670) {
					ballxdl = -ballxdl;
				}
		}
		repaint();
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
			if(playerx >=600) {
				playerx = 600;
			}else {
				moveRight();
			}
			
		}
		if(e.getKeyCode() == KeyEvent.VK_LEFT) {
			if(playerx < 10) {
				playerx = 10;
			}else {
				moveLeft();
			}
			
			
		}
		
		if(e.getKeyCode() == KeyEvent.VK_ENTER) {
			if(!play) {
				play = true;
				ballposx =120;
				ballposy =350;
				ballxdl = -1;
				ballydl = -2;
				playerx =310;
				score =0;
				totalBrick =21;
				map =new MapGenerator(3,7);
				
				repaint();
			}
		}

	}
	public void moveRight(){
		play = true;
		playerx+=20;
	}
	
	public void moveLeft(){
		play = true;
		playerx-=20;
	
	}

}
